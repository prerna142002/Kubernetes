Monolithic is always faster 
and in Microservices we have an extra call for which we call between services.

So, previously we used to have bare metals and due to which memory used to be wasted alot.
-> Virtual Machine came into existance.
   => we can have limited vitual machines 
   => we divide the memory , OS also wastes memory, 

Containers are easy to make and distribute

Linux Namespace
---------------
Containers use this concept.

pid1 -> Proces Id
root filesystem -> Filesystem
eth0 network interface -> Network
Process inside container to share memory -> Interprocess communication
own hostname -> Unix timesharing system
own root user for container -> User
 |
map to different user on the host - Linux

Ubuntu Playground 
-----------------

Container is like a process of Linux.
command -
1. docker run -d --name my-nginx-container --memory 521m --cpus 1 nginx
   -d => in detachable mode

2. ps aux | grep '[n]ginx' | sort -n -k 2 | head -n 1 | awk '{print $2}'
   this will return the process id

3. lsns -p <pid>
   this will list namespaces 

4. cd /sys/fs/cgroup/memory/system.slice/docker

5. cd /sys/fs/cgroup/memory/system.slice/docker-9fce392041a80371d6b4e462731526c5aa4f2539d96cebe240f7d95f31fe90db.scope
   this will give details for containers



Kubernetes Playground
---------------------

1. criclt ps 
   this provides details of the containers 

PAUSE
-----
there are some namespaces with name pause.
Pause is a name of process in kubernetes associated with containers that is namespace holder, process management,
signal faciliates and resources handling.
This is present in every pod
1st this runs and then other user defined containers run.


PS: When OSI came they gave a specs and now we have different runtimes present:
   Containerd, G-Visor, Docker
   This will prevent strong integration between Docker and Kubernetes so anyone can keep theirs
   By default we will not ship Docker.

   Everyone maints their shims.

   



